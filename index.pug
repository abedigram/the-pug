- // yaa Hagh
- // use single dash to represent comments

doctype html
- // 'xml' 'strict' 'transitional' are used for other doctype files

- // use indents to create nesting elements
html
    head
        link(rel="stylesheet" href="style.css")

        style.
            p {
                color: red;
            }
    body
        - // use  #  followed tag names with id name to set id
        h1#pageTitle welcome to the pug!
        
        - // use  .  followed tag names with class name to set class
        p.description main title
        p.description semi main title
        
        - // use dot followed tag names to write multiline texts
        p.
            preprocessor for html. 
            so funny

        - // writing .class #id names without tag, will create a div
        div.box
        .box
        #singleBox

        - // use () to write attributes
        - // write js ecma 2015 in ` ${} ` 
        input(type="password" name="pass" data-js=`${5 > 2 ? 'ok' : 'not ok'}`)

        - // write js after dash
        - const classes = ["class1", "class2", "class3"]
        - // give classes using js arrays, and also using both methods
        div(class=classes)
        div(class=classes).divClass

        - // use js objects for styling
        - const myStyles = {'text-align': 'center'}
        p(style=myStyles) hello
        - // also using same way as html
        p(style="text-align: center;") hello

        - // use js objects for html attributes
        - const imgAttr = {'src': 'image.png', 'alt': 'awesome image'}
        img&attributes(imgAttr)

        - // using boolean attr same as html5
        - // using other doctype modes such as 'transition' will result disabled="disabled"
        - // anyway both types is pug is supported
        - // disabled=false or disabled="disabled"
        input(type="text" disabled)

