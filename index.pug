- // yaa Hagh
- // use single dash to represent comments

doctype html
- // 'xml' 'strict' 'transitional' are used for other doctype files

- // use indents to create nesting elements
html
    head
        link(rel="stylesheet" href="style.css")

        style.
            p {
                color: red;
            }
    body
        - // use  #  followed tag names with id name to set id
        h1#pageTitle welcome to the pug!
        
        - // use  .  followed tag names with class name to set class
        p.description main title
        p.description semi main title
        
        - // use dot followed tag names to write multiline texts
        p.
            preprocessor for html. 
            so funny

        - // writing .class #id names without tag, will create a div
        div.box
        .box
        #singleBox

        - // use () to write attributes
        - // write js ecma 2015 in ` ${} ` 
        input(type="password" name="pass" data-js=`${5 > 2 ? 'ok' : 'not ok'}`)

        - // write js after dash
        - const classes = ["class1", "class2", "class3"]
        - // give classes using js arrays, and also using both methods
        div(class=classes)
        div(class=classes).divClass

        hr
        - // use js objects for styling
        - const myStyles = {'text-align': 'center'}
        p(style=myStyles) hello
        - // also using same way as html
        p(style="text-align: center;") hello

        - // use js objects for html attributes
        - const imgAttr = {'src': 'image.png', 'alt': 'awesome image'}
        img&attributes(imgAttr)

        - // using boolean attr same as html5
        - // using other doctype modes such as 'transition' will result disabled="disabled"
        - // anyway both types is pug is supported
        - // disabled=false or disabled="disabled"
        input(type="text" disabled)

        hr
        div 
            p for each loop
            - // no matter writing for or each keyword
            - // use = to assign loop values
            - // first iter is value and second is index (is not name sensitive)
            - // for value, index in [1,2,4]
            each value, index in [1,2,4]
                p= value + '-' + index
        
        hr.gray
        div
            p loop js array
            - // iterative array could be external
            - const names = ['lara', 'hana', 'dora']
            each name, i in names
                p= i + '-' + name
        
        hr.gray 
        div
            p loop js object
            - // u can use object
            - // no index could be used
            - // first iter is value and second is name
            - const grades = {'web': 20, 'ai': 13}
            each grade, course in grades
                p= course + ': ' + grade
        
        hr.gray
        div
            p loop empty array
            - // in case of looping over an empty array 'else' block runs
            each n in []
                p= n
            else
                p no values available!

        hr
        p using conditionals
        - // use if stmts as follows
        - // use | to write plaintext ( as well as . followed tag names)
        - // and #{} for accessing object data
        - let user = {name: 'mana', isLoggedIn: false, lastLog: 6}
        if user.isLoggedIn
            p
                | user #{user.name} is logged in!
        else if user.lastLog < 10
            p user last login was #{user.lastLog} mins ago
            p
                a(href="/login") login again
        else
            p #{user.name} is not logged in
            a(href="/login") login
        
        hr
        // use double slashes for commenting
        p case statement
        - const order_status = 'NA' // 'pending' 'transit' 'delivered'
        case order_status
            when 'pending'
                p your order is collecting
            when 'transit'
                p your order is on the way home
            when 'delivered'
                p the box is delivered
            default
                p your pack is lost..

        // include external pug files using 'include'
        // included files will compile automatically
        include includes/nav.pug